package org.melusky.model.obj.centralPaJug08042015;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import org.hibernate.proxy.HibernateProxy;
import org.melusky.model.obj.centralPaJug08042015.Book;
import org.melusky.model.obj.centralPaJug08042015.iface.IAuthor;
import org.melusky.util.IPojoGenEntity;


/** 
 * Object mapping for hibernate-handled table: author.
 * 
 *
 * @author autogenerated
 */

@Entity
@Table(name = "author", catalog = "central_pa_jug_08042015", schema = "application")
public class Author implements Cloneable, Serializable, IPojoGenEntity, IAuthor {

	/** Serial Version UID. */
	private static final long serialVersionUID = -6550639056037676654L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String authorName;
	/** Field mapping. */
	private Set<Book> books = new HashSet<Book>();

	/** Field mapping. */
	private Date dateCreated;
	/** Field mapping. */
	private Integer id;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Author() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Author(Integer id) {
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Author.class;
	}
 

	 /**
	 * Return the value associated with the column: authorName.
	 * @return A String object (this.authorName)
	 */
	@Basic( optional = true )
	@Column( name = "author_name", length = 2147483647  )
	public String getAuthorName() {
		return this.authorName;
		
	}
	

  
	 /**  
	 * Set the value related to the column: authorName.
	 * @param authorName the authorName value you wish to set
	 */
	public void setAuthorName(final String authorName) {
		this.authorName = authorName;
	}

	 /**
	 * Return the value associated with the column: book.
	 * @return A Set&lt;Book&gt; object (this.book)
	 */
 	@JsonManagedReference
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "author"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "author_id", nullable = false  )
	public Set<Book> getBooks() {
		return this.books;
		
	}
	
	/**
	 * Adds a bi-directional link of type Book to the books set.
	 * @param book item to add
	 */
	public void addBook(Book book) {
		book.setAuthor(this);
		this.books.add(book);
	}

  
	 /**  
	 * Set the value related to the column: book.
	 * @param book the book value you wish to set
	 */
	public void setBooks(final Set<Book> book) {
		this.books = book;
	}

	 /**
	 * Return the value associated with the column: dateCreated.
	 * @return A Date object (this.dateCreated)
	 */
	@Basic( optional = true )
	@Column( name = "date_created"  )
	public Date getDateCreated() {
		return this.dateCreated;
		
	}
	

  
	 /**  
	 * Set the value related to the column: dateCreated.
	 * @param dateCreated the dateCreated value you wish to set
	 */
	public void setDateCreated(final Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "author_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
	 /**  
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Author clone() throws CloneNotSupportedException {
		
        final Author copy = (Author)super.clone();

		copy.setAuthorName(this.getAuthorName());
		if (this.getBooks() != null) {
			copy.getBooks().addAll(this.getBooks());
		}
		copy.setDateCreated(this.getDateCreated());
		copy.setId(this.getId());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("authorName: " + this.getAuthorName() + ", ");
		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("id: " + this.getId());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Author that; 
		try {
			that = (Author) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAuthorName() == null) && (that.getAuthorName() == null)) || (getAuthorName() != null && getAuthorName().equals(that.getAuthorName())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
